const mongoose = require('mongoose');
const stressAlertService = require('../services/stressAlertService');
require('dotenv').config();

// Connexion √† MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(async () => {
    console.log('‚úÖ MongoDB Connected');
    
    try {
      console.log('\nüß™ Test simple d\'envoi d\'email d\'alerte...\n');

      // R√©cup√©rer le premier √©l√®ve de la base de donn√©es
      const { Eleve } = require('../models');
      const student = await Eleve.findOne().populate('parent').populate('classeId');

      if (!student) {
        console.log('‚ùå Aucun √©l√®ve trouv√© dans la base de donn√©es');
        return;
      }

      if (!student.parent) {
        console.log('‚ùå Aucun parent associ√© √† cet √©l√®ve');
        return;
      }

      console.log(`‚úÖ √âl√®ve trouv√©: ${student.prenom} ${student.nom}`);
      console.log(`üìß Email du parent: ${student.parent.email}`);
      console.log(`üè´ Classe: ${student.classeId ? `${student.classeId.niveau} ${student.classeId.section}` : 'Non assign√©'}\n`);

      // Simuler un niveau de stress √©lev√©
      const stressLevel = 85;
      console.log(`üö® Test avec un niveau de stress de ${stressLevel}%\n`);

      // Cr√©er un historique simul√©
      const simulatedHistory = [
        { level: 30, timestamp: new Date(Date.now() - 10 * 60 * 1000) },
        { level: 45, timestamp: new Date(Date.now() - 8 * 60 * 1000) },
        { level: 60, timestamp: new Date(Date.now() - 6 * 60 * 1000) },
        { level: 75, timestamp: new Date(Date.now() - 4 * 60 * 1000) },
        { level: stressLevel, timestamp: new Date() }
      ];

      // Forcer l'envoi de l'alerte
      console.log('üì§ Envoi de l\'email d\'alerte...');
      await stressAlertService.sendStressAlert(student._id, stressLevel, simulatedHistory, true);

      console.log('‚úÖ Email d\'alerte envoy√© avec succ√®s !');
      console.log(`üìß V√©rifiez votre bo√Æte email: ${student.parent.email}`);
      console.log('\nüéØ Le syst√®me d\'alerte de stress fonctionne parfaitement !');

    } catch (error) {
      console.error('‚ùå Erreur lors du test:', error);
    } finally {
      mongoose.connection.close();
      console.log('\nüîå Connexion MongoDB ferm√©e');
      process.exit(0);
    }
  })
  .catch((err) => {
    console.log('‚ùå MongoDB connection error: ', err);
    process.exit(1);
  }); 