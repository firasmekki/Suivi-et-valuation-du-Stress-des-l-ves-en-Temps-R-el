const { Classe, Eleve, Enseignant, Parent } = require('../models');

const getStats = async (req, res) => {
  console.log('üîç D√©but de la r√©cup√©ration des statistiques');
  console.log('üë§ Utilisateur:', req.user);
  
  try {
    console.log('üìä R√©cup√©ration des compteurs...');
    
    // R√©cup√©rer les statistiques en parall√®le pour de meilleures performances
    const [teachersCount, studentsCount, parentsCount, classesCount, classesList] = await Promise.all([
      Enseignant.countDocuments(),
      Eleve.countDocuments(),
      Parent.countDocuments(),
      Classe.countDocuments(),
      Classe.find().select('niveau section')
    ]);

    console.log('üìà Statistiques r√©cup√©r√©es:', {
      teachers: teachersCount,
      students: studentsCount,
      parents: parentsCount,
      classes: classesCount,
      classesList
    });

    res.json({
      teachers: teachersCount,
      students: studentsCount,
      parents: parentsCount,
      classes: classesCount,
      classesList
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des statistiques'
    });
  }
};

const getStressStats = async (req, res) => {
  console.log('üîç D√©but de la r√©cup√©ration des statistiques de stress');
  try {
    // G√©n√©rer des valeurs al√©atoires pour chaque niveau de stress
    const stressCounts = {
      Faible: Math.floor(Math.random() * 20) + 5,  // Entre 5 et 25 √©l√®ves
      Mod√©r√©: Math.floor(Math.random() * 15) + 3,  // Entre 3 et 18 √©l√®ves
      √âlev√©: Math.floor(Math.random() * 10) + 1    // Entre 1 et 11 √©l√®ves
    };

    console.log('üìà Statistiques de stress r√©cup√©r√©es:', stressCounts);
    res.json(stressCounts);

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques de stress:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des statistiques de stress des √©l√®ves'
    });
  }
};

const getRecentActivity = async (req, res) => {
  try {
    // R√©cup√©rer les √©l√®ves avec leurs dates d'inscription
    const eleves = await Eleve.find()
      .populate('classe', 'niveau section')
      .sort({ dateInscription: -1 })
      .limit(2);

    // R√©cup√©rer les classes avec leurs dates de cr√©ation
    const classes = await Classe.find()
      .sort({ createdAt: -1 })
      .limit(2);

    const activities = [];

    // Ajouter les activit√©s des √©l√®ves
    eleves.forEach(eleve => {
      activities.push({
        title: 'Nouvel √©l√®ve inscrit',
        description: `${eleve.prenom} ${eleve.nom} - ${eleve.classe ? eleve.classe.niveau + ' ' + eleve.classe.section : 'Non assign√©'}`,
        timestamp: eleve.dateInscription || eleve.createdAt,
        type: 'student'
      });
    });

    // Ajouter les activit√©s des classes
    classes.forEach(classe => {
      activities.push({
        title: 'Nouvelle classe cr√©√©e',
        description: `${classe.niveau} ${classe.section}`,
        timestamp: classe.createdAt,
        type: 'class'
      });
    });

    // Trier toutes les activit√©s par date (les plus r√©centes en premier)
    activities.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

    // Limiter √† 3 activit√©s les plus r√©centes
    const recentActivities = activities.slice(0, 3);

    // Si aucune activit√© n'est trouv√©e, ajouter une activit√© par d√©faut
    if (recentActivities.length === 0) {
      recentActivities.push({
        title: 'Aucune activit√© r√©cente',
        description: 'Aucune activit√© n\'a √©t√© enregistr√©e',
        timestamp: new Date(),
        type: 'info'
      });
    }

    res.json(recentActivities);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des activit√©s r√©centes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des activit√©s r√©centes'
    });
  }
};

const generateStressAdvice = (history) => {
  const advice = [];
  
  console.log('G√©n√©ration des conseils pour l\'historique:', history);

  // Analyser les p√©riodes de stress √©lev√©
  const highStressDays = history.filter(h => h.stress === '√âlev√©').length;
  const moderateStressDays = history.filter(h => h.stress === 'Mod√©r√©').length;
  
  if (highStressDays >= 2) {
    advice.push({
      type: 'danger',
      message: 'Plusieurs jours de stress √©lev√© d√©tect√©s. Recommandation : Activit√©s de relaxation quotidiennes et suivi.'
    });
  }
  
  if (moderateStressDays >= 3) {
    advice.push({
      type: 'attention',
      message: 'Stress mod√©r√© persistant. Suggestion : Exercices de respiration r√©guliers et gestion du temps.'
    });
  }
  
  // Analyser les tendances
  // Assurez-vous qu'il y a au moins deux jours pour calculer une tendance
  if (history.length >= 2) {
    const recentTrend = history[0].stressLevel - history[1].stressLevel;
    if (recentTrend > 20) {
      advice.push({
        type: 'danger',
        message: 'Augmentation rapide du stress. Action recommand√©e : Pause imm√©diate et exercices de relaxation.'
      });
    } else if (recentTrend < -20) {
        advice.push({
            type: 'success',
            message: 'Diminution notable du stress. Continuez les bonnes pratiques.'
        });
    }
  }

  // Si aucun conseil sp√©cifique n'est g√©n√©r√©, ajouter un conseil par d√©faut
  if (advice.length === 0) {
    advice.push({
      type: 'success',
      message: 'Votre niveau de stress est stable. Continuez √† maintenir un bon √©quilibre.'
    });
  }
  
  console.log('Conseils g√©n√©r√©s:', advice);
  return advice;
};

const generatePreventiveAlerts = (history, student) => {
  const alerts = [];
  
  // Analyser les patterns de stress
  const stressPatterns = history.map(h => ({
    date: h.date,
    level: h.stress === 'Faible' ? 20 : h.stress === 'Mod√©r√©' ? 50 : 80
  }));
  
  // D√©tecter les tendances √† la hausse
  const recentLevels = stressPatterns.slice(0, 3).map(p => p.level);
  const isIncreasing = recentLevels[0] > recentLevels[1] && recentLevels[1] > recentLevels[2];
  
  if (isIncreasing) {
    alerts.push({
      type: 'warning',
      title: 'Tendance √† la hausse',
      message: `Le niveau de stress de ${student.prenom} ${student.nom} montre une tendance √† la hausse sur les 3 derniers jours`,
      severity: 'warning',
      timestamp: new Date()
    });
  }
  
  // D√©tecter les niveaux de stress √©lev√©s persistants
  const highStressCount = history.filter(h => h.stress === '√âlev√©').length;
  if (highStressCount >= 2) {
    alerts.push({
      type: 'danger',
      title: 'Stress √©lev√© persistant',
      message: `${student.prenom} ${student.nom} pr√©sente un niveau de stress √©lev√© depuis ${highStressCount} jours`,
      severity: 'danger',
      timestamp: new Date()
    });
  }
  
  return alerts;
};

const getAlerts = async (req, res) => {
  try {
    // Liste des alertes possibles en fran√ßais
    const possibleAlerts = [
      {
        type: 'attention',
        title: 'Niveau de stress √©lev√©',
        severity: 'attention',
        timestamp: new Date()
      },
      {
        type: 'stable',
        title: 'Niveau de stress normal',
        severity: 'stable',
        timestamp: new Date()
      },
      {
        type: 'attention',
        title: 'Tendance √† la hausse',
        severity: 'attention',
        timestamp: new Date()
      },
      {
        type: 'danger',
        title: 'Stress √©lev√© persistant',
        severity: 'danger',
        timestamp: new Date()
      },
      {
        type: 'attention',
        title: 'Tendance √† la hausse',
        severity: 'attention',
        timestamp: new Date()
      },
      {
        type: 'stable',
        title: 'Am√©lioration du stress',
        severity: 'stable',
        timestamp: new Date()
      }
    ];

    // S√©lectionner une alerte al√©atoire
    const randomIndex = Math.floor(Math.random() * possibleAlerts.length);
    const selectedAlert = possibleAlerts[randomIndex];

    // Retourner un tableau avec une seule alerte
    res.json([selectedAlert]);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des alertes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des alertes'
    });
  }
};

const getClassStats = async (req, res) => {
  try {
    const classes = await Classe.find()
      .populate({
        path: 'eleves',
        select: 'niveauStress absences'
      });

    const classStats = classes.map(classe => {
      // Calculer le nombre d'√©l√®ves
      const studentCount = classe.eleves ? classe.eleves.length : 0;

      // G√©n√©rer un niveau de stress al√©atoire entre 0 et 10
      const averageStress = (Math.random() * 10).toFixed(1);

      // Calculer le taux d'absence
      let totalAbsences = 0;
      let studentsWithAbsences = 0;

      if (classe.eleves && classe.eleves.length > 0) {
        classe.eleves.forEach(eleve => {
          if (eleve.absences && eleve.absences.length > 0) {
            totalAbsences += eleve.absences.length;
            studentsWithAbsences++;
          }
        });
      }

      const absenceRate = studentsWithAbsences > 0 ? (totalAbsences / studentsWithAbsences).toFixed(1) : 0;

      // D√©terminer le statut de la classe
      let status = 'stable';
      if (averageStress > 7 || absenceRate > 3) {
        status = 'attention';
      }

      return {
        id: classe._id,
        name: `${classe.niveau} ${classe.section}`,
        studentCount,
        averageStress: parseFloat(averageStress),
        absenceRate: parseFloat(absenceRate),
        status
      };
    });

    res.json(classStats);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des statistiques de classe:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des statistiques de classe'
    });
  }
};

const predictStressLevel = async (req, res) => {
  try {
    const { studentId } = req.params;
    
    // R√©cup√©rer l'historique des 7 derniers jours (donn√©es al√©atoires pour d√©mo)
    const history = [];
    const today = new Date();
    
    for (let i = 0; i < 7; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() - i);
      
      const stressLevel = Math.floor(Math.random() * 100); // Stress al√©atoire entre 0 et 99
      
      history.push({
        date: date.toISOString().split('T')[0],
        stressLevel,
        stress: stressLevel > 70 ? '√âlev√©' : stressLevel > 30 ? 'Mod√©r√©' : 'Faible'
      });
    }
    
    // Calculer la moyenne pond√©r√©e des 7 derniers jours
    const weights = [0.1, 0.1, 0.15, 0.15, 0.2, 0.15, 0.15];
    let weightedSum = 0;
    
    history.forEach((day, index) => {
      weightedSum += day.stressLevel * weights[index];
    });
    
    const predictedStress = Math.round(weightedSum);
    
    // D√©terminer la tendance
    const recentTrend = history[0].stressLevel - history[1].stressLevel;
    const trend = recentTrend > 0 ? '‚Üë' : recentTrend < 0 ? '‚Üì' : '‚Üí';
    
    // Calculer le niveau de confiance
    const variance = history.reduce((acc, day) => {
      return acc + Math.pow(day.stressLevel - predictedStress, 2);
    }, 0) / history.length;
    
    const confidence = Math.max(60, Math.min(95, 100 - Math.sqrt(variance)));

    // G√©n√©rer les conseils bas√©s sur l'historique
    const advice = generateStressAdvice(history);
    
    console.log('Pr√©diction g√©n√©r√©e pour', studentId, ':', { predictedStress, trend, confidence, history: history.slice(0,10), advice });

    res.json({
      predictedStress,
      trend,
      confidence: Math.round(confidence),
      history: history.reverse(),
      advice
    });
    
  } catch (error) {
    console.error('Erreur lors de la pr√©diction du niveau de stress:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la pr√©diction du niveau de stress'
    });
  }
};

module.exports = {
  getStats,
  getStressStats,
  getRecentActivity,
  getAlerts,
  getClassStats,
  predictStressLevel
}; 