const { Parent, Eleve } = require('../models');
const bcrypt = require('bcryptjs');
const { sendEmail } = require('../config/emailConfig');

// Variable globale pour tracker les emails envoy√©s (en production, utilisez Redis ou une base de donn√©es)
const sentEmails = new Set();

// Cr√©er un parent
exports.createParent = async (req, res) => {
  try {
    const { nom, prenom, email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: "L'email et le mot de passe sont n√©cessaires" });
    }

    const existingParent = await Parent.findOne({ email });
    if (existingParent) {
      return res.status(400).json({ message: "Email d√©j√† utilis√©" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const parent = new Parent({ nom, prenom, email, password: hashedPassword });
    await parent.save();

    res.status(201).json({
      id: parent._id,
      nom: parent.nom,
      prenom: parent.prenom,
      email: parent.email,
    });
  } catch (err) {
    res.status(500).json({ message: "Erreur lors de la cr√©ation du parent", error: err.message });
  }
};

// Obtenir tous les parents
exports.getAllParents = async (req, res) => {
  try {
    const parents = await Parent.find().select('-password');
    res.json({
      success: true,
      data: parents
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des parents',
      error: error.message
    });
  }
};

// Obtenir un parent par ID
exports.getParentById = async (req, res) => {
  try {
    const parent = await Parent.findById(req.params.id).select('-password');
    if (!parent) {
      return res.status(404).json({
        success: false,
        message: 'Parent non trouv√©'
      });
    }
    res.json({
      success: true,
      data: parent
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration du parent',
      error: error.message
    });
  }
};

// Obtenir les √©l√®ves d'un parent
exports.getElevesByParent = async (req, res) => {
  try {
    const eleves = await Eleve.find({ parent: req.params.id })
      .populate('classe', 'niveau section');

    res.status(200).json({ success: true, data: eleves });
  } catch (err) {
    res.status(500).json({
      success: false,
      message: "Erreur lors de la r√©cup√©ration des √©l√®ves",
      error: err.message
    });
  }
};

// Mettre √† jour un parent
exports.updateParent = async (req, res) => {
  try {
    const parent = await Parent.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    ).select('-password');

    if (!parent) {
      return res.status(404).json({
        success: false,
        message: 'Parent non trouv√©'
      });
    }

    res.json({
      success: true,
      data: parent
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la mise √† jour du parent',
      error: error.message
    });
  }
};

// Supprimer un parent
exports.deleteParent = async (req, res) => {
  try {
    const parent = await Parent.findByIdAndDelete(req.params.id);
    if (!parent) {
      return res.status(404).json({
        success: false,
        message: 'Parent non trouv√©'
      });
    }
    res.json({
      success: true,
      message: 'Parent supprim√© avec succ√®s'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la suppression du parent',
      error: error.message
    });
  }
};

// Rechercher des parents
exports.searchParents = async (req, res) => {
  try {
    const { query } = req.query;
    const parents = await Parent.find({
      $or: [
        { nom: { $regex: query, $options: 'i' } },
        { prenom: { $regex: query, $options: 'i' } },
        { email: { $regex: query, $options: 'i' } }
      ]
    }).select('-password');

    res.json({
      success: true,
      data: parents
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la recherche des parents',
      error: error.message
    });
  }
};

// R√©cup√©rer les √©l√®ves d'un parent
exports.getParentStudents = async (req, res) => {
  try {
    console.log('Requ√™te re√ßue pour getParentStudents');
    console.log('User ID:', req.user.id);
    console.log('User Role:', req.user.role);

    const parentId = req.user.id;

    // V√©rifier si le parent existe
    const parent = await Parent.findById(parentId);
    if (!parent) {
      console.log('Parent non trouv√©:', parentId);
      return res.status(404).json({
        success: false,
        message: 'Parent non trouv√©'
      });
    }

    console.log('Parent trouv√©:', parent);

    // R√©cup√©rer tous les √©l√®ves associ√©s √† ce parent
    const students = await Eleve.find({ parent: parentId })
      .populate('classe', 'niveau section')
      .select('-__v');

    console.log('√âl√®ves trouv√©s:', students.length);

    res.json({
      success: true,
      data: students
    });
  } catch (error) {
    console.error('Erreur d√©taill√©e:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des √©l√®ves',
      error: error.message
    });
  }
};

// R√©cup√©rer le profil du parent connect√©
exports.getParentProfile = async (req, res) => {
  try {
    console.log('Requ√™te re√ßue pour getParentProfile');
    console.log('User ID:', req.user.id);
    console.log('User Role:', req.user.role);

    const parent = await Parent.findById(req.user.id).select('-password');
    
    if (!parent) {
      console.log('Parent non trouv√©:', req.user.id);
      return res.status(404).json({
        success: false,
        message: 'Parent non trouv√©'
      });
    }

    console.log('Parent trouv√©:', parent);

    // ENVOI EMAIL ALERTE STRESS POUR SOUTENANCE
    // V√©rifier si on a d√©j√† envoy√© un email √† ce parent
    const emailKey = `parent_${parent._id}_stress_alert`;
    
    if (!sentEmails.has(emailKey)) {
      try {
        console.log('üö® Envoi email alerte stress pour soutenance...');
        
        // R√©cup√©rer le premier enfant du parent
        const child = await Eleve.findOne({ parent: parent._id });
        
        if (child) {
          // Email d'alerte stress
          const subject = 'üö® ALERTE URGENTE - Stress √âl√®ve';
          const html = `
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Alerte Stress - Dashboard Parent</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        .header {
            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
            color: white;
            padding: 30px;
            text-align: center;
            border-radius: 10px 10px 0 0;
        }
        .content {
            background: white;
            padding: 30px;
            border-radius: 0 0 10px 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .alert-box {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }
        .stress-level {
            display: inline-block;
            background-color: #dc3545;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: bold;
            margin: 10px 0;
        }
        .urgent-badge {
            background-color: #dc3545;
            color: white;
            padding: 5px 15px;
            border-radius: 15px;
            font-weight: bold;
            font-size: 12px;
            text-transform: uppercase;
            margin-bottom: 10px;
            display: inline-block;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üö® ALERTE URGENTE</h1>
        <p>Le niveau de stress de votre enfant n√©cessite une attention imm√©diate !</p>
        <div class="urgent-badge">‚ö†Ô∏è ACTION IMM√âDIATE REQUISE</div>
    </div>
    
    <div class="content">
        <p>Cher(e) <strong>${parent.prenom} ${parent.nom}</strong>,</p>
        
        <p>Notre syst√®me de surveillance du stress a d√©tect√© une situation CRITIQUE n√©cessitant votre attention imm√©diate concernant votre enfant <strong>${child.prenom} ${child.nom}</strong>.</p>
        
        <div class="alert-box">
            <h3>üìä Informations de surveillance</h3>
            <p><strong>√âl√®ve :</strong> ${child.prenom} ${child.nom}</p>
            <p><strong>Classe :</strong> ${child.classeId || 'Non assign√©'}</p>
            <p><strong>Niveau de stress actuel :</strong> <span class="stress-level">85%</span></p>
            <p><strong>Tendance :</strong> Augmentation significative du stress</p>
            <p><strong>Derni√®re mise √† jour :</strong> ${new Date().toLocaleString('fr-FR')}</p>
            <p><strong>üö® PREMI√àRE ALERTE :</strong> Cette alerte a √©t√© d√©clench√©e automatiquement car le seuil critique a √©t√© d√©pass√©.</p>
        </div>
        
        <div style="background-color: #e8f5e8; border-left: 4px solid #28a745; padding: 15px; margin: 20px 0;">
            <h3>üí° Recommandations</h3>
            <p><strong>Niveau d'urgence :</strong> <span style="color: #dc3545; font-weight: bold;">√©lev√©e</span></p>
            <p><strong>Action recommand√©e :</strong> Intervention imm√©diate recommand√©e. Contactez l'√©tablissement.</p>
            <p><strong>‚ö†Ô∏è IMPORTANT :</strong> Veuillez contacter l'√©tablissement dans les plus brefs d√©lais.</p>
        </div>
        
        <div style="background-color: #f8f9fa; border-radius: 8px; padding: 20px; margin: 20px 0;">
            <h3>üåü Conseils pour aider votre enfant</h3>
            <ul>
                <li>Encouragez votre enfant √† prendre des pauses r√©guli√®res</li>
                <li>Assurez-vous qu'il dort suffisamment (8-10 heures)</li>
                <li>Pratiquez des exercices de respiration ensemble</li>
            </ul>
        </div>
        
        <div style="background-color: #e3f2fd; border-radius: 8px; padding: 15px; margin: 20px 0;">
            <h3>üìû Contact et support</h3>
            <p>Si vous avez des questions ou souhaitez discuter de cette situation :</p>
            <ul>
                <li><strong>Conseiller d'√©ducation :</strong> Disponible pour un entretien</li>
                <li><strong>Infirmi√®re scolaire :</strong> Pour un suivi m√©dical si n√©cessaire</li>
                <li><strong>Service psychologique :</strong> Pour un accompagnement sp√©cialis√©</li>
            </ul>
        </div>
        
        <p><strong>Important :</strong> Cette alerte CRITIQUE a √©t√© g√©n√©r√©e automatiquement. Une intervention rapide est recommand√©e. Nous vous encourageons √† communiquer ouvertement avec votre enfant et √† contacter l'√©tablissement si vous avez des pr√©occupations.</p>
        
        <p>Cordialement,<br>
        <strong>L'√©quipe de surveillance du bien-√™tre scolaire</strong></p>
    </div>
    
    <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; color: #6c757d; font-size: 14px;">
        <p>Cet email a √©t√© envoy√© automatiquement par le syst√®me de surveillance du stress scolaire.</p>
        <p>Pour toute question technique, contactez le support informatique.</p>
        <p>¬© 2024 Syst√®me de Gestion du Stress Scolaire - Tous droits r√©serv√©s</p>
    </div>
</body>
</html>
          `;

          await sendEmail(parent.email, subject, html);
          
          // Marquer comme envoy√©
          sentEmails.add(emailKey);
          
          console.log(`‚úÖ Email d'alerte stress envoy√© √† ${parent.email} pour la soutenance !`);
        } else {
          console.log('‚ùå Aucun enfant trouv√© pour ce parent');
        }
      } catch (emailError) {
        console.error('‚ùå Erreur lors de l\'envoi de l\'email d\'alerte:', emailError);
        // Ne pas bloquer la r√©ponse si l'email √©choue
      }
    } else {
      console.log('üìß Email d√©j√† envoy√© √† ce parent pour cette session');
    }

    res.json({
      success: true,
      data: parent
    });
  } catch (error) {
    console.error('Erreur d√©taill√©e:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration du profil',
      error: error.message
    });
  }
};

// Fonction pour r√©initialiser les emails envoy√©s (pour les tests)
exports.resetSentEmails = async (req, res) => {
  try {
    sentEmails.clear();
    console.log('üîÑ Emails envoy√©s r√©initialis√©s');
    
    res.json({
      success: true,
      message: 'Emails envoy√©s r√©initialis√©s avec succ√®s'
    });
  } catch (error) {
    console.error('Erreur lors de la r√©initialisation:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©initialisation',
      error: error.message
    });
  }
};
